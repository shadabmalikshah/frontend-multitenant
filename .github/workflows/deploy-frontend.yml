name: Deploy Frontend to GCP Storage

on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    env:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCS_BUCKET: ${{ secrets.GCS_BUCKET }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Run tests and generate coverage
        run: npm test -- --coverage

      - name: SonarQube scan with coverage
        uses: sonarsource/sonarqube-scan-action@v2
        with:
          args: >
            -Dsonar.projectKey=shadabmalikshah_frontend-multitenant
            -Dsonar.organization=shadabmalikshah
            -Dsonar.host.url=${{ env.SONAR_HOST_URL }}
            -Dsonar.login=${{ env.SONAR_TOKEN }}
            -Dsonar.sources=src
            -Dsonar.tests=src
            -Dsonar.test.inclusions=**/*.test.js,**/*.test.jsx
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.exclusions=**/node_modules/**,**/build/**

      # Uncomment and update Trivy step if a working version is available
      # - name: Trivy scan dependencies
      #   uses: aquasecurity/trivy-action@v0.19.2
      #   with:
      #     scan-type: 'fs'
      #     ignore-unfixed: true
      #     severity: 'CRITICAL,HIGH'
      #     format: 'table'
      #     exit-code: '0'
      #     path: '.'

      - name: Build frontend
        run: npm run build

      - name: Authenticate to Google Cloud (OIDC)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Show active gcloud account
        run: gcloud auth list

      - name: Show credentials file
        run: cat $GOOGLE_APPLICATION_CREDENTIALS

      - name: Upload to GCS bucket
        run: |
          export GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS
          export CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE=$GOOGLE_APPLICATION_CREDENTIALS
          export CLOUDSDK_CORE_PROJECT=${{ env.GCP_PROJECT_ID }}
          gsutil -o "Credentials:gs_service_key_file=$GOOGLE_APPLICATION_CREDENTIALS" -m rsync -r build gs://${{ env.GCS_BUCKET }}

      - name: Notify Slack on success
        if: success()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "✅ Frontend deployed to GCS bucket: ${{ env.GCS_BUCKET }} by ${{ github.actor }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: failure()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "❌ Frontend deployment to GCS bucket failed for ${{ github.actor }}. Check workflow logs."
            }
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
